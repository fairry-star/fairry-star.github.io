<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数学</title>
    <link href="/2025/02/23/%E9%AB%98%E6%95%B0/"/>
    <url>/2025/02/23/%E9%AB%98%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308132258737.png" alt="image-20250308132258737"></p><h3 id="1-函数-极限-连续"><a href="#1-函数-极限-连续" class="headerlink" title="1.函数   极限  连续"></a>1.函数   极限  连续</h3><h3 id="1-1函数"><a href="#1-1函数" class="headerlink" title="1.1函数"></a>1.1函数</h3><p><strong>复合函数:内函数的值域与外函数的定义域有交集</strong></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308133250462.png" alt="image-20250308133250462"></p><p><strong>反函数</strong>：一一映射</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308133216697.png" alt="image-20250308133216697"></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308133441741.png" alt="image-20250308133441741"></p><p><strong>初等函数：</strong>幂函数 指数函数 对数函数 三角函数 反三角函数</p><p><strong>函数的有界性、单调性、周期性、奇偶性判定</strong></p><ol><li></li></ol><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308134005781.png" alt="image-20250308134005781"></p><p>奇函数 积分 等于0</p><p>证明一个函数的奇偶性，判断f(-x)与f(x)的关系</p><ol start="2"><li></li></ol><p>有界等价于既有上界既有下界  |f（x）|小于等于M</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308153453217.png" alt="image-20250308153453217"></p><p>常用的有界：</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308153532017.png" alt="image-20250308153532017">.</p><p>证明xsinx是无界函数</p><p>当x取二分之派 +2nπ 时xsinx是无界的</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308153841791.png" alt="image-20250308153841791"></p><h4 id="1-1-2常考题型"><a href="#1-1-2常考题型" class="headerlink" title="1.1.2常考题型"></a>1.1.2常考题型</h4><h5 id="1-函数的有界性、单调性、周期性、奇偶性"><a href="#1-函数的有界性、单调性、周期性、奇偶性" class="headerlink" title="1.函数的有界性、单调性、周期性、奇偶性"></a>1.函数的有界性、单调性、周期性、奇偶性</h5><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308154229845.png" alt="image-20250308154229845"></p><p>xsinx 是无界函数，当x取二分之派 +2nπ 时xsinx是无界的（n要多大有多大）</p><p>sinx可能取到0，x可能取到0，所以不单调</p><p>x不是周期函数</p><p>e的cosx是偶函数</p><h5 id="2-复合函数"><a href="#2-复合函数" class="headerlink" title="2.复合函数"></a>2.复合函数</h5><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308154804591.png" alt="image-20250308154804591"></p><p>注意X是谁 ，题目中x是内层函数的定义域 复合函数的内层函数的值域是外层函数的定义域。注意正负</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308155241325.png" alt="image-20250308155241325"></p><p>注意定义域范围0（由题中给出的条件求得）。注意第二部是判断定义域的关键。e的x次方图像</p><p><img src="https://p1.gk100.com/article/20221118/85bfac2287416965.png" alt="高中数学ln是什么意思？附函数ln公式大全-高考100"></p><h3 id="1-2极限"><a href="#1-2极限" class="headerlink" title="1.2极限"></a>1.2极限</h3><h4 id="1-2-1数列极限"><a href="#1-2-1数列极限" class="headerlink" title="1.2.1数列极限"></a>1.2.1数列极限</h4><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308160452009.png" alt="image-20250308160452009"></p><p>数列的极限和前有限项无关</p><p>奇数列和偶数列的极限<strong>相等时</strong>，才能推出该数列极限。</p><p>已知该数列极限，那么它的任何一个部分极限存在且一样</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308160830980.png" alt="image-20250308160830980"></p><p>解法1：分子分母同时除 或者分奇数列和偶数列</p><p>解法2：夹逼准则  （指数取1或者-1）</p><p>解法3：极限重要定理</p><p>解法3：有指数取对数（无穷小*有界&#x3D;0）</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308161228963.png" alt="image-20250308161228963"></p><p>我们知道((-1)^{n})的值是在1和(-1)之间交替出现的。0乘有界等于0</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308161757604.png" alt="image-20250308161757604"></p><p>证明题是注意<strong>利****用性质定理</strong>。证明不成立时举反例。第二问往往利用第一问的结论。</p><p>第二问 同样<strong>利用性质定理</strong>证明。</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308162249549.png" alt="image-20250308162249549"></p><p>结论：</p><img src="D:\乐云云盘\hexo-blogcd\source\_posts\高数\image-20250308162017461.png" alt="image-20250308162017461" style="zoom:50%;" /><p>数列的绝对值趋于无穷小，那么去掉绝对值也趋于无穷小<img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308162349578.png" alt="image-20250308162349578"></p><p>当x趋于0时，sin1&#x2F;x的极限不存在，且sin1&#x2F;x可能等于0。不可以做分母。不可以乘开写。</p><p>性质：</p><p>1.有界性</p><p>收敛（有极限）数列必有界，但有界不一定收敛（收敛），反例（-1的n次方）</p><p><strong>2.保号性</strong><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226201503020.png" alt="image-20250226201503020"></p><p>极限存在准则：</p><p>1.夹逼准则<strong>（n项和）</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226212142439.png" alt="image-20250226212142439"></p><p>阶乘存在可以展开观察。</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226213034509.png" alt="image-20250226213034509"></p><p>2.单调有界准则（递推关系的数列）</p><p>单调增，有上界的数列必有极限</p><p>单调减，有下界的数列必有极限</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226213311194.png" alt="image-20250226213311194"></p><h4 id="1-2-2函数极限"><a href="#1-2-2函数极限" class="headerlink" title="1.2.2函数极限"></a>1.2.2函数极限</h4><p>1）自变量趋于无穷大时函数的极限（分正无穷负无穷）</p><p>有时数列极限（<strong>n只能取正整数</strong>）可以转换成函数极限去计算 因为函数极限可以使用洛必达法则</p><p>例如：sin（πx），sin（nx）。当n趋于无穷时sin（nx）极限为0，sin（πx）为-1到1.</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226184703081.png" alt="image-20250226184703081"></p><p>默认：</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226184832053.png" alt="image-20250226184832053"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226184926357.png" alt="image-20250226184926357"></p><p>当x趋于无穷时，要分正无穷还是负无穷。当单侧的极限相等时，极限才存在。</p><p>2)自变量趋于有限值时函数的极限<img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226190156207.png" alt="image-20250226190156207"></p><p>自变量只能趋向不能等于，而函数值可以趋向可以等于可以恒等极限。</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226190323194.png" alt="image-20250226190323194"></p><p>当x趋于有限值0时</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226190619319.png" alt="image-20250226190619319"></p><p>不满足趋于零但是不可以等于0，所以不成立。极限不存在</p><p>在0的去心领域时，有的点会使分母为0，没有定义，极限不存在</p><p>3）求极限时分左右极限</p><p>1.分段函数在分界点处的极限</p><p>2.e的无穷次方型</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226192957716.png" alt="image-20250226192957716" style="zoom:67%;" /><p>3.arctan无穷 型</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226193129331.png" alt="image-20250226193129331"></p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226193418018.png" alt="image-20250226193418018" style="zoom:67%;" /><p>首先是函数极限的变量趋于有限（x趋于1，但是不能等于1，极限存在。符合定理）。</p><p>e的无穷型，要分左右极限，当x趋于1+，e的正无穷&#x3D;正无穷，e的负无穷&#x3D;0.   D</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226194314525.png" alt="image-20250226194314525"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226195158021.png" alt="image-20250226195158021"></p><p>函数极限（x趋于0.但是取不到）  arctan无穷要分左右极限。重要极限的应用。</p><p>（凑重要极限公式）</p><p>性质：</p><p>1.有界性</p><p>极限存在，则f(x)在x0的某去心邻域有界. 但是有界不一定极限存在。（反例 lim x趋于x0 sin1&#x2F;x)</p><p><strong>2.保号性</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226205636429.png" alt="image-20250226205636429"></p><p><strong>函数极限的保号性例题：</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226210159074.png" alt="image-20250226210159074"></p><p>直接法  间接法（一般函数 和具体函数带入）</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226210501190.png" alt="image-20250226210501190"></p><p>3.极限值与无穷小之间的关系</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226211012692.png" alt="image-20250226211012692"></p><h4 id="1-2-3无穷小-大量"><a href="#1-2-3无穷小-大量" class="headerlink" title="1.2.3无穷小&#x2F;大量"></a>1.2.3无穷小&#x2F;大量</h4><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226214444736.png" alt="image-20250226214444736"></p><p>利用等价公式</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226214548930.png" alt="image-20250226214548930"></p><p><strong>性质：</strong></p><p><strong>有限</strong>个无穷小和为无穷小</p><p><strong>有限</strong>个无穷小的积是无穷小</p><p>无穷小乘以 有界 （绝对值不超过M）是无穷小</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226214848610.png" alt="image-20250226214848610" style="zoom:50%;" /><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226220133742.png" alt="image-20250226220133742"></p><p>当x趋向于x0时，函数值要多大有多大（f(x)的绝对值&gt;M）</p><p><strong>常用的无穷大量的比较</strong></p><p>当分子趋于无穷&lt;分母趋于无穷时  极限趋于0</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250227153728349.png" alt="image-20250227153728349"></p><p>性质：</p><p>有限个正&#x2F;负无穷大&#x2F;负的和是无穷大</p><p>有限个无穷大的乘积是无穷大</p><p>无穷大与有界变量的和是无穷大</p><p><strong>无穷大量与无界变量的关系</strong></p><p><strong>无穷大（每一个都无穷大）</strong>一定<strong>无界（有的是无穷大）</strong>，无界不一定无穷大</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250227155944925.png" alt="image-20250227155944925"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250227160006801.png" alt="image-20250227160006801"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250227160238593.png" alt="image-20250227160238593"></p><p><strong>无穷大量与无穷小量的关系</strong></p><p>无穷大的倒数是无穷小，但是无穷小的倒数不一定是无穷大。但是当f(x)不等于0时，1&#x2F;f(x)才是无穷大。</p><h4 id="1-2-4常考题型"><a href="#1-2-4常考题型" class="headerlink" title="1.2.4常考题型"></a>1.2.4常考题型</h4><h5 id="1-极限的概念性质及其存在准则"><a href="#1-极限的概念性质及其存在准则" class="headerlink" title="1.极限的概念性质及其存在准则"></a>1.极限的概念性质及其存在准则</h5><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301185927263.png" alt="image-20250301185927263"></p><p>ε的范围是前提条件，然后题目中所给式的右边范围是确定的，（0,2）</p><p>ε0的范围有两个（0,2）与[2,+无穷）</p><p>（0,2）时：是必要条件</p><p>   [2,+无穷）时：是充分条件</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301193808015.png" alt="image-20250301193808015" style="zoom:25%;" /><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301194240247.png" alt="image-20250301194240247"  /><p>D</p><p><strong>（一个数列极限存在）  与（偶数项极限与奇数项极限相等）  是充分必要条件</strong></p><p><strong>一个数列极限存在，那么它的任何一个部分极限都相等</strong></p><p>修改选项D 当3n&#x3D;3n+1&#x3D;3n+2时 就成立 ，n的取值范围一般从1开始，有时也从0在研究奇偶数项时。</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301201553329.png" alt="image-20250301201553329"></p><p>D</p><p><strong>注意：震荡函数 sin无穷会取到0</strong></p><p><strong>无界不一定无穷大，例如 1,0,2,0,3,0…….n</strong></p><p><strong>无穷大一定无界</strong></p><p>证明无穷大 ：利用定义（&gt;任意的M）sin1&#x2F;x:取值最大的是1，</p><p>1&#x2F;x&#x3D;2nπ+2&#x2F;π   由于n无限大所以，是大于M无界的</p><p>另一个点1&#x2F;x&#x3D;2nπ，等于0，所以肯定不是无穷大。</p><p><strong>常数0乘以无穷大&#x3D;0，但是趋近于0乘以无穷大时未定式</strong></p><h5 id="2-求极限（8方法）"><a href="#2-求极限（8方法）" class="headerlink" title="2.求极限（8方法）"></a><strong>2.求极限</strong>（8方法）</h5><p>5（函数极限）</p><p>3（数列极限）</p><h6 id="方法1：利用基本极限求极限"><a href="#方法1：利用基本极限求极限" class="headerlink" title="方法1：利用基本极限求极限"></a><strong>方法1</strong>：利用基本极限求极限</h6><p><strong>幂指函数</strong>的底数必须大于0，如果是负值，极限不存在</p><p>1）e的x次方 -x -1  等价于1&#x2F;2 x方 </p><p>​       ln（1+x）-x等价于1&#x2F;2 x方</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301203836128.png" alt="image-20250301203836128"></p><p>2）<strong>1的无穷次方</strong>：（凑e）（改写+洛必达）（写成标准型-求极限-写结果）</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301204257556.png" alt="image-20250301204257556"></p><p><strong>1的无穷次方是不定式可能不是1</strong>（当底数<em>f</em>(<em>x</em>)恒为1，指数<em>g</em>(<em>x</em>)趋于无穷时，1∞的极限等于1。）</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301210007536.png" alt="image-20250301210007536"></p><p>例题：1的无穷型</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301210454531.png" alt="image-20250301210454531"></p><p><strong>间接法：代数</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301211905969.png" alt="image-20250301211905969"></p><p><strong>标准型—-求极限—–求原式</strong></p><p><strong>知识点：n必要时可以放到分母，常数提前，用到基本极限。</strong></p><h6 id="方法2：利用等价无穷小代换求极限"><a href="#方法2：利用等价无穷小代换求极限" class="headerlink" title="方法2：利用等价无穷小代换求极限"></a><strong>方法2：</strong>利用等价无穷小代换求极限</h6><p>代换原则：乘除关系可以换</p><p><strong>加减关系在一定条件下可以代换。（两个减项相比不等价为1）</strong></p><p>sinx-tan2x:可以换</p><p>sinx-tanx：不可以换</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301212857492.png" alt="image-20250301212857492"></p><p>证明：<img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301212723613.png" alt="image-20250301212723613"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301213521004.png" alt="image-20250301213521004"></p><p>常用：arctanx—–sinx—–x——arcsinx——tanx（I&#x2F;6 x三次方）</p><ol><li></li></ol><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301213859938.png" alt="image-20250301213859938" style="zoom:50%;" /><p>等价无穷小—洛必达—–拉格朗日中值定理</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301213919580.png" alt="image-20250301213919580" style="zoom:50%;" /><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301214024071.png" alt="image-20250301214024071"></p><ol start="2"><li></li></ol><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301214402977.png" alt="image-20250301214402977" style="zoom:50%;" /><p>拉格朗日中值定理—–提公因式凑1</p><p>3.<img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301215212352.png" alt="image-20250301215212352"></p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301215304813.png" alt="image-20250301215304813" style="zoom:50%;" /><p>知识点：1的无穷次方型    e的x次方-1等价于x    cosx-1等价于 - 1&#x2F;2x</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301215537357.png" alt="image-20250301215537357"></p><p>有次方取对数   ln（1+x）等价于x ，构造1</p><p>结论：</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301215945349.png" alt="image-20250301215945349"></p><p>不是常数时必须两个相乘趋于0</p><p>证明：取e的ln为底，然后e的x次方-1等价于x</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302160527468.png" alt="image-20250302160527468"></p><p>4.<img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302160918383.png" alt="image-20250302160918383"></p><p><strong>寻找中间关联的数</strong></p><p>5.0比0型  <strong>洛必达 等价代换   泰勒</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302161617861.png" alt="image-20250302161617861"></p><p>x-ln（1+x）等价于1&#x2F;2x方</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302161932211.png" alt="image-20250302161932211"></p><p>tanx的倒数等于secx方</p><p>1+tanx方&#x3D;secx方</p><h6 id="方法3：利用有理运算法则-求极限（极限-连续-导数-级数）"><a href="#方法3：利用有理运算法则-求极限（极限-连续-导数-级数）" class="headerlink" title="方法3：利用有理运算法则**求极限（极限 连续 导数 级数）"></a><strong>方法3：利用</strong>有理运算法则**求极限（极限 连续 导数 级数）</h6><p>前提条件：每个部分的极限都存在</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302162832335.png" alt="image-20250302162832335" style="zoom:50%;" /><p>极限存在+-极限不存在&#x3D;不存在（反证法）</p><p>极限不存在+-极限不存在&#x3D;不一定</p><p>n   与-n     0</p><p>n    与 n    2n</p><p>极限不存在*  &#x2F; 极限不存在 &#x3D;不一定</p><p>n   与 n </p><p>n    与sin n</p><p>（-1）n方 与（-1）n方</p><p>极限不存在* &#x2F; 极限存在 &#x3D;不一定</p><p> n 与 1&#x2F;n</p><p> n   与1&#x2F;根号n</p><p><strong>极限的非0因子的极限可以先算出来</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302171101662.png" alt="image-20250302171101662"></p><p>证明：（2）</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302171122972.png" alt="image-20250302171122972"></p><p>证明（3）</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302171248373.png" alt="image-20250302171248373" style="zoom:50%;" /><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302171952774.png" alt="image-20250302171952774"></p><p><strong>极限存在+极限存在&#x3D;极限存在</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302172656245.png" alt="image-20250302172656245"></p><p>极限想要存在必为a必须1</p><p>方法二：</p><p>提出一个x，1&#x2F;x做分母，整个极限存在，分母极限是1，所以分子极限趋于0.</p><ol start="5"><li></li></ol><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302173813065.png" alt="image-20250302173813065"></p><p>注意：x趋于0，sinx的极限存在为0</p><ol start="6"><li></li></ol><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302174621487.png" alt="image-20250302174621487"></p><p>错因：没有注意到x是趋近于   <strong>负无穷</strong></p><p>解法二：抓大头（注意正负）</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302175041824.png" alt="image-20250302175041824"></p><h6 id="方法4：利用洛必达法则求极限"><a href="#方法4：利用洛必达法则求极限" class="headerlink" title="方法4：利用洛必达法则求极限"></a>方法4：利用洛必达法则求极限</h6><p>条件：0&#x2F;0  无穷&#x2F;无穷   </p><p>幂指函数先取对数 再将其中一个放到分母，最后使用洛必达</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303184321570.png" alt="image-20250303184321570"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303191237351.png" alt="image-20250303191237351"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303191257234.png" alt="image-20250303191257234"></p><img src="高数/image-20250303191312534.png" alt="image-20250303191312534" style="zoom: 80%;" /><p><img src="/%E9%AB%98%E6%95%B0/image-20250303191624999.png" alt="image-20250303191624999"></p><p><strong>求抽象函数极限时要注意</strong></p><p>二阶可导说明 一阶可导，一阶可导说明一阶连续</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303193243790.png" alt="image-20250303193243790"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303193318823.png" alt="image-20250303193318823"></p><p>n阶可导只能用到n-1阶的洛必达法则</p><p>导数定义：</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303193506873.png" alt="image-20250303193506873"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303193729438.png" alt="image-20250303193729438"></p><h6 id="方法5：利用泰勒公式求极限"><a href="#方法5：利用泰勒公式求极限" class="headerlink" title="方法5：利用泰勒公式求极限"></a>方法5：利用泰勒公式求极限</h6><p>指对函数1,2,3</p><p>正弦函数1,3,5</p><p>正弦指数有感叹</p><p>正弦对数隔一换</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303201901234.png" alt="image-20250303201901234"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303194143143.png" alt="image-20250303194143143"></p><p>0&#x2F;0：核心方法（泰勒  等价   洛必达）</p><p>展开到上下同次方</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303195318658.png" alt="image-20250303195318658"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303200337119.png" alt="image-20250303200337119"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303202752104.png" alt="image-20250303202752104"></p><p>注意：极限存在+极限存在&#x3D;极限存在</p><p><strong>常数0*无穷&#x3D;0</strong></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303203044998.png" alt="image-20250303203044998"></p><p>使用等价时是有条件的  由于f（x）不确定所以不能等价和洛必达</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303204744242.png" alt="image-20250303204744242"></p><p>方法:2：凑</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303204935072.png" alt="image-20250303204935072"></p><p>方法3：将f（x）用表达式表示出来</p><p>   <img src="/%E9%AB%98%E6%95%B0/image-20250303205225552.png" alt="image-20250303205225552"></p><p>方法4：</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303205413744.png" alt="image-20250303205413744"></p><h6 id="方法6：利用夹逼定理求极限"><a href="#方法6：利用夹逼定理求极限" class="headerlink" title="方法6：利用夹逼定理求极限"></a>方法6：利用夹逼定理求极限</h6><p><img src="/%E9%AB%98%E6%95%B0/image-20250304084445947.png" alt="image-20250304084445947"></p><p>分母换成一样的，分子求和（等差求和）</p><p>无穷的0次方</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304090137279.png" alt="image-20250304090137279"></p><p>结论：极限等于底数中最大的一个</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304091006178.png" alt="image-20250304091006178"></p><p>必须确认那个 am最大。</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304091059077.png" alt="image-20250304091059077"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304091401023.png" alt="image-20250304091401023"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304091905466.png" alt="image-20250304091905466"></p><h6 id="当1换成任何实数时结果都不变"><a href="#当1换成任何实数时结果都不变" class="headerlink" title="当1换成任何实数时结果都不变"></a>当1换成任何实数时结果都不变</h6><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h6 id="方法7：利用单调有界准则求极限"><a href="#方法7：利用单调有界准则求极限" class="headerlink" title="方法7：利用单调有界准则求极限"></a>方法7：利用单调有界准则求极限</h6><p>a方+b方   大于等于2ab</p><p>第一步：证明极限存在，单调（后一项比前一项&#x2F;后一项减去前一项）有界（基本不等式）准则</p><p>第二步：设a为极限，带入求极限</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304160252098.png" alt="image-20250304160252098"></p><h6 id="方法8：利用定积分定义求极限"><a href="#方法8：利用定积分定义求极限" class="headerlink" title="方法8：利用定积分定义求极限"></a>方法8：利用定积分定义求极限</h6><p>n项和的极限可以用  夹逼准则  或者 定积分</p><p>n项乘积的极限可以取对数</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304171714887.png" alt="image-20250304171714887"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304172909186.png" alt="image-20250304172909186"></p><h5 id="3-无穷小量阶的比较（常用等价代换去确定阶数）"><a href="#3-无穷小量阶的比较（常用等价代换去确定阶数）" class="headerlink" title="3.无穷小量阶的比较（常用等价代换去确定阶数）"></a>3.无穷小量阶的比较（常用等价代换去确定阶数）</h5><ol><li></li></ol><p><img src="/%E9%AB%98%E6%95%B0/image-20250306201219625.png" alt="image-20250306201219625"></p><p>1.等价则，两个式子之比是1，复杂的做分子，简单的做分母</p><p>2.极限存在&#x3D;极限存在+极限存在</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306201525977.png" alt="image-20250306201525977"></p><p>出现两个根式根式     </p><p>1.分母有理化</p><p>2..寻找分子的共同点，都具有根号，可以用拉格朗日中值定理</p><p>3.凑等加公式（1-cosx的贝塔次方 等价于 贝塔&#x2F;2 x的平方）</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306202341492.png" alt="image-20250306202341492"></p><p>2.等价代换</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306202941484.png" alt="image-20250306202941484"></p><p>可以直接化成同一形式去比较高阶（等价代换）</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306203321025.png" alt="image-20250306203321025"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306203649080.png" alt="image-20250306203649080"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306204322706.png" alt="image-20250306204322706"></p><p>泰勒公式展开</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306204540258.png" alt="image-20250306204540258"></p><p>由g(x)可以算出来f（x）的阶数，可以求出a，</p><p>但是一定要把a代入去求b       因为：不代入直接等价的话会丢失无穷小项信息</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306205232776.png" alt="image-20250306205232776"></p><p>但是当a b 已知可以直接等价</p><h3 id="1-3函数的连续性"><a href="#1-3函数的连续性" class="headerlink" title="1.3函数的连续性"></a>1.3函数的连续性</h3><p>概念：极限值等于函数值   左连续&#x3D;右连续</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306210140726.png" alt="image-20250306210140726"></p><p>闭区间连续：左端点求右连续   右端点求左连续</p><p>间断点：在去心领域有定义但是在该点不连续</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306212814230.png" alt="image-20250306212814230"></p><p><strong>判断间断点：</strong></p><p>**无定义的点 **</p><p><strong>有定义但是  极限不存在</strong>（一般都是分段函数，所以都找无定义的点）</p><p>有定义极限存在   但是极限值不等于函数值</p><p><strong>第一类间断点：左右极限都存在</strong></p><p>第二类间断点：左右极限至少有一个不存在</p><p>无穷 间断点 ：1\x 趋于无穷,极限不存在</p><p>震荡 间断点：sin1\x:函数值始终在[-1,1]震荡，极限不存在</p><p>​    </p><p><strong>连续性的运算与性质：</strong></p><p>连续函数的和差积商仍连续</p><p>连续函数的复合仍连续</p><p>基本初等函数（5类）在定义域内连续</p><p>初等函数（由基本初等函数变换）在其定义区间(在定义域内部)内连续</p><p>定义域唯一，定义域不唯一。</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308191641115.png" alt="image-20250308191641115"></p><p>离散点组成的定义域不包含任何区间</p><p><strong>闭区间上连续函数的性质：</strong></p><p>1.有界性</p><p>2.最值定理</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308204059765.png" alt="image-20250308204059765"></p><p>3.介值定理</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308192636247.png" alt="image-20250308192636247"></p><p>如果一个连续区间包括最大值最小值，那么这个区间的值就是值域</p><p>f(a)与f(b)</p><p>4.零点定理</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308192745862.png" alt="image-20250308192745862"></p><h4 id="题型1：讨论函数的连续性及间断点的类型"><a href="#题型1：讨论函数的连续性及间断点的类型" class="headerlink" title="题型1：讨论函数的连续性及间断点的类型"></a>题型1：讨论函数的连续性及间断点的类型</h4><p><img src="/%E9%AB%98%E6%95%B0/image-20250306210321992.png" alt="image-20250306210321992"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306210506711.png" alt="image-20250306210506711"></p><p><strong>求点  画函数图</strong><img src="/%E9%AB%98%E6%95%B0/image-20250306211043247.png" alt="image-20250306211043247"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306211734506.png" alt="image-20250306211734506"></p><p>画出函数图，判断奇偶。点的连续性（左连续等于右连续，函数值等于极限值）</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308194009206.png" alt="image-20250308194009206"></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308193958893.png" alt="image-20250308193958893"></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308194527117.png" alt="image-20250308194527117"></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308195443204.png" alt="image-20250308195443204"></p><p>观察式子，分子分母变形约分</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308202241611.png" alt="image-20250308202241611"></p><p>求极限找出f（x）的表达式</p><p><strong>先分析x的2n次方</strong></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308182722429.png" alt="image-20250308182722429"></p><p>先找间断点，无定义的点    x&#x3D;1，x&#x3D;0</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308184014435.png" alt="image-20250308184014435"></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308184051073.png" alt="image-20250308184051073"></p><p>先找间断点 x&#x3D; 0   -1   1   2</p><p>再求极限，极限不存在的是第二类间断点</p><h4 id="题型2：有关闭区间上连续函数性质的证明题"><a href="#题型2：有关闭区间上连续函数性质的证明题" class="headerlink" title="题型2：有关闭区间上连续函数性质的证明题"></a>题型2：有关闭区间上连续函数性质的证明题</h4><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308204537365.png" alt="image-20250308204537365"></p><p>最值定理和介值定理（在M与m之间的C  能找到一个 西格玛使得成立）</p><h3 id="总结一："><a href="#总结一：" class="headerlink" title="总结一："></a>总结一：</h3><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308211357591.png" alt="image-20250308211357591"></p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学、高等数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学</title>
    <link href="/2025/02/23/%E9%AB%98%E6%95%B0_%E5%86%B2%E7%AA%81_20250308211400/"/>
    <url>/2025/02/23/%E9%AB%98%E6%95%B0_%E5%86%B2%E7%AA%81_20250308211400/</url>
    
    <content type="html"><![CDATA[<p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308132258737.png" alt="image-20250308132258737"></p><h3 id="1-函数-极限-连续"><a href="#1-函数-极限-连续" class="headerlink" title="1.函数   极限  连续"></a>1.函数   极限  连续</h3><h3 id="1-1函数"><a href="#1-1函数" class="headerlink" title="1.1函数"></a>1.1函数</h3><p><strong>复合函数:内函数的值域与外函数的定义域有交集</strong></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308133250462.png" alt="image-20250308133250462"></p><p><strong>反函数</strong>：一一映射</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308133216697.png" alt="image-20250308133216697"></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308133441741.png" alt="image-20250308133441741"></p><p><strong>初等函数：</strong>幂函数 指数函数 对数函数 三角函数 反三角函数</p><p><strong>函数的有界性、单调性、周期性、奇偶性判定</strong></p><ol><li></li></ol><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308134005781.png" alt="image-20250308134005781"></p><p>奇函数 积分 等于0</p><p>证明一个函数的奇偶性，判断f(-x)与f(x)的关系</p><ol start="2"><li></li></ol><p>有界等价于既有上界既有下界  |f（x）|小于等于M</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308153453217.png" alt="image-20250308153453217"></p><p>常用的有界：</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308153532017.png" alt="image-20250308153532017">.</p><p>证明xsinx是无界函数</p><p>当x取二分之派 +2nπ 时xsinx是无界的</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308153841791.png" alt="image-20250308153841791"></p><h4 id="1-1-2常考题型"><a href="#1-1-2常考题型" class="headerlink" title="1.1.2常考题型"></a>1.1.2常考题型</h4><h5 id="1-函数的有界性、单调性、周期性、奇偶性"><a href="#1-函数的有界性、单调性、周期性、奇偶性" class="headerlink" title="1.函数的有界性、单调性、周期性、奇偶性"></a>1.函数的有界性、单调性、周期性、奇偶性</h5><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308154229845.png" alt="image-20250308154229845"></p><p>xsinx 是无界函数，当x取二分之派 +2nπ 时xsinx是无界的（n要多大有多大）</p><p>sinx可能取到0，x可能取到0，所以不单调</p><p>x不是周期函数</p><p>e的cosx是偶函数</p><h5 id="2-复合函数"><a href="#2-复合函数" class="headerlink" title="2.复合函数"></a>2.复合函数</h5><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308154804591.png" alt="image-20250308154804591"></p><p>注意X是谁 ，题目中x是内层函数的定义域 复合函数的内层函数的值域是外层函数的定义域。注意正负</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308155241325.png" alt="image-20250308155241325"></p><p>注意定义域范围0（由题中给出的条件求得）。注意第二部是判断定义域的关键。e的x次方图像</p><p><img src="https://p1.gk100.com/article/20221118/85bfac2287416965.png" alt="高中数学ln是什么意思？附函数ln公式大全-高考100"></p><h3 id="1-2极限"><a href="#1-2极限" class="headerlink" title="1.2极限"></a>1.2极限</h3><h4 id="1-2-1数列极限"><a href="#1-2-1数列极限" class="headerlink" title="1.2.1数列极限"></a>1.2.1数列极限</h4><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308160452009.png" alt="image-20250308160452009"></p><p>数列的极限和前有限项无关</p><p>奇数列和偶数列的极限<strong>相等时</strong>，才能推出该数列极限。</p><p>已知该数列极限，那么它的任何一个部分极限存在且一样</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308160830980.png" alt="image-20250308160830980"></p><p>解法1：分子分母同时除 或者分奇数列和偶数列</p><p>解法2：夹逼准则  （指数取1或者-1）</p><p>解法3：极限重要定理</p><p>解法3：有指数取对数（无穷小*有界&#x3D;0）</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308161228963.png" alt="image-20250308161228963"></p><p>我们知道((-1)^{n})的值是在1和(-1)之间交替出现的。0乘有界等于0</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308161757604.png" alt="image-20250308161757604"></p><p>证明题是注意<strong>利****用性质定理</strong>。证明不成立时举反例。第二问往往利用第一问的结论。</p><p>第二问 同样<strong>利用性质定理</strong>证明。</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308162249549.png" alt="image-20250308162249549"></p><p>结论：</p><img src="D:\乐云云盘\hexo-blogcd\source\_posts\高数\image-20250308162017461.png" alt="image-20250308162017461" style="zoom:50%;" /><p>数列的绝对值趋于无穷小，那么去掉绝对值也趋于无穷小<img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308162349578.png" alt="image-20250308162349578"></p><p>当x趋于0时，sin1&#x2F;x的极限不存在，且sin1&#x2F;x可能等于0。不可以做分母。不可以乘开写。</p><p>性质：</p><p>1.有界性</p><p>收敛（有极限）数列必有界，但有界不一定收敛（收敛），反例（-1的n次方）</p><p><strong>2.保号性</strong><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226201503020.png" alt="image-20250226201503020"></p><p>极限存在准则：</p><p>1.夹逼准则<strong>（n项和）</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226212142439.png" alt="image-20250226212142439"></p><p>阶乘存在可以展开观察。</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226213034509.png" alt="image-20250226213034509"></p><p>2.单调有界准则（递推关系的数列）</p><p>单调增，有上界的数列必有极限</p><p>单调减，有下界的数列必有极限</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226213311194.png" alt="image-20250226213311194"></p><h4 id="1-2-2函数极限"><a href="#1-2-2函数极限" class="headerlink" title="1.2.2函数极限"></a>1.2.2函数极限</h4><p>1）自变量趋于无穷大时函数的极限（分正无穷负无穷）</p><p>有时数列极限（<strong>n只能取正整数</strong>）可以转换成函数极限去计算 因为函数极限可以使用洛必达法则</p><p>例如：sin（πx），sin（nx）。当n趋于无穷时sin（nx）极限为0，sin（πx）为-1到1.</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226184703081.png" alt="image-20250226184703081"></p><p>默认：</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226184832053.png" alt="image-20250226184832053"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226184926357.png" alt="image-20250226184926357"></p><p>当x趋于无穷时，要分正无穷还是负无穷。当单侧的极限相等时，极限才存在。</p><p>2)自变量趋于有限值时函数的极限<img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226190156207.png" alt="image-20250226190156207"></p><p>自变量只能趋向不能等于，而函数值可以趋向可以等于可以恒等极限。</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226190323194.png" alt="image-20250226190323194"></p><p>当x趋于有限值0时</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226190619319.png" alt="image-20250226190619319"></p><p>不满足趋于零但是不可以等于0，所以不成立。极限不存在</p><p>在0的去心领域时，有的点会使分母为0，没有定义，极限不存在</p><p>3）求极限时分左右极限</p><p>1.分段函数在分界点处的极限</p><p>2.e的无穷次方型</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226192957716.png" alt="image-20250226192957716" style="zoom:67%;" /><p>3.arctan无穷 型</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226193129331.png" alt="image-20250226193129331"></p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226193418018.png" alt="image-20250226193418018" style="zoom:67%;" /><p>首先是函数极限的变量趋于有限（x趋于1，但是不能等于1，极限存在。符合定理）。</p><p>e的无穷型，要分左右极限，当x趋于1+，e的正无穷&#x3D;正无穷，e的负无穷&#x3D;0.   D</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226194314525.png" alt="image-20250226194314525"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226195158021.png" alt="image-20250226195158021"></p><p>函数极限（x趋于0.但是取不到）  arctan无穷要分左右极限。重要极限的应用。</p><p>（凑重要极限公式）</p><p>性质：</p><p>1.有界性</p><p>极限存在，则f(x)在x0的某去心邻域有界. 但是有界不一定极限存在。（反例 lim x趋于x0 sin1&#x2F;x)</p><p><strong>2.保号性</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226205636429.png" alt="image-20250226205636429"></p><p><strong>函数极限的保号性例题：</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226210159074.png" alt="image-20250226210159074"></p><p>直接法  间接法（一般函数 和具体函数带入）</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226210501190.png" alt="image-20250226210501190"></p><p>3.极限值与无穷小之间的关系</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226211012692.png" alt="image-20250226211012692"></p><h4 id="1-2-3无穷小-大量"><a href="#1-2-3无穷小-大量" class="headerlink" title="1.2.3无穷小&#x2F;大量"></a>1.2.3无穷小&#x2F;大量</h4><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226214444736.png" alt="image-20250226214444736"></p><p>利用等价公式</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226214548930.png" alt="image-20250226214548930"></p><p><strong>性质：</strong></p><p><strong>有限</strong>个无穷小和为无穷小</p><p><strong>有限</strong>个无穷小的积是无穷小</p><p>无穷小乘以 有界 （绝对值不超过M）是无穷小</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226214848610.png" alt="image-20250226214848610" style="zoom:50%;" /><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250226220133742.png" alt="image-20250226220133742"></p><p>当x趋向于x0时，函数值要多大有多大（f(x)的绝对值&gt;M）</p><p><strong>常用的无穷大量的比较</strong></p><p>当分子趋于无穷&lt;分母趋于无穷时  极限趋于0</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250227153728349.png" alt="image-20250227153728349"></p><p>性质：</p><p>有限个正&#x2F;负无穷大&#x2F;负的和是无穷大</p><p>有限个无穷大的乘积是无穷大</p><p>无穷大与有界变量的和是无穷大</p><p><strong>无穷大量与无界变量的关系</strong></p><p><strong>无穷大（每一个都无穷大）</strong>一定<strong>无界（有的是无穷大）</strong>，无界不一定无穷大</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250227155944925.png" alt="image-20250227155944925"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250227160006801.png" alt="image-20250227160006801"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250227160238593.png" alt="image-20250227160238593"></p><p><strong>无穷大量与无穷小量的关系</strong></p><p>无穷大的倒数是无穷小，但是无穷小的倒数不一定是无穷大。但是当f(x)不等于0时，1&#x2F;f(x)才是无穷大。</p><h4 id="1-2-4常考题型"><a href="#1-2-4常考题型" class="headerlink" title="1.2.4常考题型"></a>1.2.4常考题型</h4><h5 id="1-极限的概念性质及其存在准则"><a href="#1-极限的概念性质及其存在准则" class="headerlink" title="1.极限的概念性质及其存在准则"></a>1.极限的概念性质及其存在准则</h5><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301185927263.png" alt="image-20250301185927263"></p><p>ε的范围是前提条件，然后题目中所给式的右边范围是确定的，（0,2）</p><p>ε0的范围有两个（0,2）与[2,+无穷）</p><p>（0,2）时：是必要条件</p><p>   [2,+无穷）时：是充分条件</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301193808015.png" alt="image-20250301193808015" style="zoom:25%;" /><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301194240247.png" alt="image-20250301194240247"  /><p>D</p><p><strong>（一个数列极限存在）  与（偶数项极限与奇数项极限相等）  是充分必要条件</strong></p><p><strong>一个数列极限存在，那么它的任何一个部分极限都相等</strong></p><p>修改选项D 当3n&#x3D;3n+1&#x3D;3n+2时 就成立 ，n的取值范围一般从1开始，有时也从0在研究奇偶数项时。</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301201553329.png" alt="image-20250301201553329"></p><p>D</p><p><strong>注意：震荡函数 sin无穷会取到0</strong></p><p><strong>无界不一定无穷大，例如 1,0,2,0,3,0…….n</strong></p><p><strong>无穷大一定无界</strong></p><p>证明无穷大 ：利用定义（&gt;任意的M）sin1&#x2F;x:取值最大的是1，</p><p>1&#x2F;x&#x3D;2nπ+2&#x2F;π   由于n无限大所以，是大于M无界的</p><p>另一个点1&#x2F;x&#x3D;2nπ，等于0，所以肯定不是无穷大。</p><p><strong>常数0乘以无穷大&#x3D;0，但是趋近于0乘以无穷大时未定式</strong></p><h5 id="2-求极限（8方法）"><a href="#2-求极限（8方法）" class="headerlink" title="2.求极限（8方法）"></a><strong>2.求极限</strong>（8方法）</h5><p>5（函数极限）</p><p>3（数列极限）</p><h6 id="方法1：利用基本极限求极限"><a href="#方法1：利用基本极限求极限" class="headerlink" title="方法1：利用基本极限求极限"></a><strong>方法1</strong>：利用基本极限求极限</h6><p><strong>幂指函数</strong>的底数必须大于0，如果是负值，极限不存在</p><p>1）e的x次方 -x -1  等价于1&#x2F;2 x方 </p><p>​       ln（1+x）-x等价于1&#x2F;2 x方</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301203836128.png" alt="image-20250301203836128"></p><p>2）<strong>1的无穷次方</strong>：（凑e）（改写+洛必达）（写成标准型-求极限-写结果）</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301204257556.png" alt="image-20250301204257556"></p><p><strong>1的无穷次方是不定式可能不是1</strong>（当底数<em>f</em>(<em>x</em>)恒为1，指数<em>g</em>(<em>x</em>)趋于无穷时，1∞的极限等于1。）</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301210007536.png" alt="image-20250301210007536"></p><p>例题：1的无穷型</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301210454531.png" alt="image-20250301210454531"></p><p><strong>间接法：代数</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301211905969.png" alt="image-20250301211905969"></p><p><strong>标准型—-求极限—–求原式</strong></p><p><strong>知识点：n必要时可以放到分母，常数提前，用到基本极限。</strong></p><h6 id="方法2：利用等价无穷小代换求极限"><a href="#方法2：利用等价无穷小代换求极限" class="headerlink" title="方法2：利用等价无穷小代换求极限"></a><strong>方法2：</strong>利用等价无穷小代换求极限</h6><p>代换原则：乘除关系可以换</p><p><strong>加减关系在一定条件下可以代换。（两个减项相比不等价为1）</strong></p><p>sinx-tan2x:可以换</p><p>sinx-tanx：不可以换</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301212857492.png" alt="image-20250301212857492"></p><p>证明：<img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301212723613.png" alt="image-20250301212723613"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301213521004.png" alt="image-20250301213521004"></p><p>常用：arctanx—–sinx—–x——arcsinx——tanx（I&#x2F;6 x三次方）</p><ol><li></li></ol><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301213859938.png" alt="image-20250301213859938" style="zoom:50%;" /><p>等价无穷小—洛必达—–拉格朗日中值定理</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301213919580.png" alt="image-20250301213919580" style="zoom:50%;" /><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301214024071.png" alt="image-20250301214024071"></p><ol start="2"><li></li></ol><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301214402977.png" alt="image-20250301214402977" style="zoom:50%;" /><p>拉格朗日中值定理—–提公因式凑1</p><p>3.<img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301215212352.png" alt="image-20250301215212352"></p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301215304813.png" alt="image-20250301215304813" style="zoom:50%;" /><p>知识点：1的无穷次方型    e的x次方-1等价于x    cosx-1等价于 - 1&#x2F;2x</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301215537357.png" alt="image-20250301215537357"></p><p>有次方取对数   ln（1+x）等价于x ，构造1</p><p>结论：</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250301215945349.png" alt="image-20250301215945349"></p><p>不是常数时必须两个相乘趋于0</p><p>证明：取e的ln为底，然后e的x次方-1等价于x</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302160527468.png" alt="image-20250302160527468"></p><p>4.<img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302160918383.png" alt="image-20250302160918383"></p><p><strong>寻找中间关联的数</strong></p><p>5.0比0型  <strong>洛必达 等价代换   泰勒</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302161617861.png" alt="image-20250302161617861"></p><p>x-ln（1+x）等价于1&#x2F;2x方</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302161932211.png" alt="image-20250302161932211"></p><p>tanx的倒数等于secx方</p><p>1+tanx方&#x3D;secx方</p><h6 id="方法3：利用有理运算法则-求极限（极限-连续-导数-级数）"><a href="#方法3：利用有理运算法则-求极限（极限-连续-导数-级数）" class="headerlink" title="方法3：利用有理运算法则**求极限（极限 连续 导数 级数）"></a><strong>方法3：利用</strong>有理运算法则**求极限（极限 连续 导数 级数）</h6><p>前提条件：每个部分的极限都存在</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302162832335.png" alt="image-20250302162832335" style="zoom:50%;" /><p>极限存在+-极限不存在&#x3D;不存在（反证法）</p><p>极限不存在+-极限不存在&#x3D;不一定</p><p>n   与-n     0</p><p>n    与 n    2n</p><p>极限不存在*  &#x2F; 极限不存在 &#x3D;不一定</p><p>n   与 n </p><p>n    与sin n</p><p>（-1）n方 与（-1）n方</p><p>极限不存在* &#x2F; 极限存在 &#x3D;不一定</p><p> n 与 1&#x2F;n</p><p> n   与1&#x2F;根号n</p><p><strong>极限的非0因子的极限可以先算出来</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302171101662.png" alt="image-20250302171101662"></p><p>证明：（2）</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302171122972.png" alt="image-20250302171122972"></p><p>证明（3）</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302171248373.png" alt="image-20250302171248373" style="zoom:50%;" /><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302171952774.png" alt="image-20250302171952774"></p><p><strong>极限存在+极限存在&#x3D;极限存在</strong></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302172656245.png" alt="image-20250302172656245"></p><p>极限想要存在必为a必须1</p><p>方法二：</p><p>提出一个x，1&#x2F;x做分母，整个极限存在，分母极限是1，所以分子极限趋于0.</p><ol start="5"><li></li></ol><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302173813065.png" alt="image-20250302173813065"></p><p>注意：x趋于0，sinx的极限存在为0</p><ol start="6"><li></li></ol><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302174621487.png" alt="image-20250302174621487"></p><p>错因：没有注意到x是趋近于   <strong>负无穷</strong></p><p>解法二：抓大头（注意正负）</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250302175041824.png" alt="image-20250302175041824"></p><h6 id="方法4：利用洛必达法则求极限"><a href="#方法4：利用洛必达法则求极限" class="headerlink" title="方法4：利用洛必达法则求极限"></a>方法4：利用洛必达法则求极限</h6><p>条件：0&#x2F;0  无穷&#x2F;无穷   </p><p>幂指函数先取对数 再将其中一个放到分母，最后使用洛必达</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303184321570.png" alt="image-20250303184321570"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303191237351.png" alt="image-20250303191237351"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303191257234.png" alt="image-20250303191257234"></p><img src="高数/image-20250303191312534.png" alt="image-20250303191312534" style="zoom: 80%;" /><p><img src="/%E9%AB%98%E6%95%B0/image-20250303191624999.png" alt="image-20250303191624999"></p><p><strong>求抽象函数极限时要注意</strong></p><p>二阶可导说明 一阶可导，一阶可导说明一阶连续</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303193243790.png" alt="image-20250303193243790"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303193318823.png" alt="image-20250303193318823"></p><p>n阶可导只能用到n-1阶的洛必达法则</p><p>导数定义：</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303193506873.png" alt="image-20250303193506873"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303193729438.png" alt="image-20250303193729438"></p><h6 id="方法5：利用泰勒公式求极限"><a href="#方法5：利用泰勒公式求极限" class="headerlink" title="方法5：利用泰勒公式求极限"></a>方法5：利用泰勒公式求极限</h6><p>指对函数1,2,3</p><p>正弦函数1,3,5</p><p>正弦指数有感叹</p><p>正弦对数隔一换</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303201901234.png" alt="image-20250303201901234"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303194143143.png" alt="image-20250303194143143"></p><p>0&#x2F;0：核心方法（泰勒  等价   洛必达）</p><p>展开到上下同次方</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303195318658.png" alt="image-20250303195318658"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303200337119.png" alt="image-20250303200337119"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303202752104.png" alt="image-20250303202752104"></p><p>注意：极限存在+极限存在&#x3D;极限存在</p><p><strong>常数0*无穷&#x3D;0</strong></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303203044998.png" alt="image-20250303203044998"></p><p>使用等价时是有条件的  由于f（x）不确定所以不能等价和洛必达</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303204744242.png" alt="image-20250303204744242"></p><p>方法:2：凑</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303204935072.png" alt="image-20250303204935072"></p><p>方法3：将f（x）用表达式表示出来</p><p>   <img src="/%E9%AB%98%E6%95%B0/image-20250303205225552.png" alt="image-20250303205225552"></p><p>方法4：</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250303205413744.png" alt="image-20250303205413744"></p><h6 id="方法6：利用夹逼定理求极限"><a href="#方法6：利用夹逼定理求极限" class="headerlink" title="方法6：利用夹逼定理求极限"></a>方法6：利用夹逼定理求极限</h6><p><img src="/%E9%AB%98%E6%95%B0/image-20250304084445947.png" alt="image-20250304084445947"></p><p>分母换成一样的，分子求和（等差求和）</p><p>无穷的0次方</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304090137279.png" alt="image-20250304090137279"></p><p>结论：极限等于底数中最大的一个</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304091006178.png" alt="image-20250304091006178"></p><p>必须确认那个 am最大。</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304091059077.png" alt="image-20250304091059077"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304091401023.png" alt="image-20250304091401023"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304091905466.png" alt="image-20250304091905466"></p><h6 id="当1换成任何实数时结果都不变"><a href="#当1换成任何实数时结果都不变" class="headerlink" title="当1换成任何实数时结果都不变"></a>当1换成任何实数时结果都不变</h6><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h6 id="方法7：利用单调有界准则求极限"><a href="#方法7：利用单调有界准则求极限" class="headerlink" title="方法7：利用单调有界准则求极限"></a>方法7：利用单调有界准则求极限</h6><p>a方+b方   大于等于2ab</p><p>第一步：证明极限存在，单调（后一项比前一项&#x2F;后一项减去前一项）有界（基本不等式）准则</p><p>第二步：设a为极限，带入求极限</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304160252098.png" alt="image-20250304160252098"></p><h6 id="方法8：利用定积分定义求极限"><a href="#方法8：利用定积分定义求极限" class="headerlink" title="方法8：利用定积分定义求极限"></a>方法8：利用定积分定义求极限</h6><p>n项和的极限可以用  夹逼准则  或者 定积分</p><p>n项乘积的极限可以取对数</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304171714887.png" alt="image-20250304171714887"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250304172909186.png" alt="image-20250304172909186"></p><h5 id="3-无穷小量阶的比较（常用等价代换去确定阶数）"><a href="#3-无穷小量阶的比较（常用等价代换去确定阶数）" class="headerlink" title="3.无穷小量阶的比较（常用等价代换去确定阶数）"></a>3.无穷小量阶的比较（常用等价代换去确定阶数）</h5><ol><li></li></ol><p><img src="/%E9%AB%98%E6%95%B0/image-20250306201219625.png" alt="image-20250306201219625"></p><p>1.等价则，两个式子之比是1，复杂的做分子，简单的做分母</p><p>2.极限存在&#x3D;极限存在+极限存在</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306201525977.png" alt="image-20250306201525977"></p><p>出现两个根式根式     </p><p>1.分母有理化</p><p>2..寻找分子的共同点，都具有根号，可以用拉格朗日中值定理</p><p>3.凑等加公式（1-cosx的贝塔次方 等价于 贝塔&#x2F;2 x的平方）</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306202341492.png" alt="image-20250306202341492"></p><p>2.等价代换</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306202941484.png" alt="image-20250306202941484"></p><p>可以直接化成同一形式去比较高阶（等价代换）</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306203321025.png" alt="image-20250306203321025"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306203649080.png" alt="image-20250306203649080"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306204322706.png" alt="image-20250306204322706"></p><p>泰勒公式展开</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306204540258.png" alt="image-20250306204540258"></p><p>由g(x)可以算出来f（x）的阶数，可以求出a，</p><p>但是一定要把a代入去求b       因为：不代入直接等价的话会丢失无穷小项信息</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306205232776.png" alt="image-20250306205232776"></p><p>但是当a b 已知可以直接等价</p><h3 id="1-3函数的连续性"><a href="#1-3函数的连续性" class="headerlink" title="1.3函数的连续性"></a>1.3函数的连续性</h3><p>概念：极限值等于函数值   左连续&#x3D;右连续</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306210140726.png" alt="image-20250306210140726"></p><p>闭区间连续：左端点求右连续   右端点求左连续</p><p>间断点：在去心领域有定义但是在该点不连续</p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306212814230.png" alt="image-20250306212814230"></p><p><strong>判断间断点：</strong></p><p>**无定义的点 **</p><p><strong>有定义但是  极限不存在</strong>（一般都是分段函数，所以都找无定义的点）</p><p>有定义极限存在   但是极限值不等于函数值</p><p><strong>第一类间断点：左右极限都存在</strong></p><p>第二类间断点：左右极限至少有一个不存在</p><p>无穷 间断点 ：1\x 趋于无穷,极限不存在</p><p>震荡 间断点：sin1\x:函数值始终在[-1,1]震荡，极限不存在</p><p>​    </p><p><strong>连续性的运算与性质：</strong></p><p>连续函数的和差积商仍连续</p><p>连续函数的复合仍连续</p><p>基本初等函数（5类）在定义域内连续</p><p>初等函数（由基本初等函数变换）在其定义区间(在定义域内部)内连续</p><p>定义域唯一，定义域不唯一。</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308191641115.png" alt="image-20250308191641115"></p><p>离散点组成的定义域不包含任何区间</p><p><strong>闭区间上连续函数的性质：</strong></p><p>1.有界性</p><p>2.最值定理</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308204059765.png" alt="image-20250308204059765"></p><p>3.介值定理</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308192636247.png" alt="image-20250308192636247"></p><p>如果一个连续区间包括最大值最小值，那么这个区间的值就是值域</p><p>f(a)与f(b)</p><p>4.零点定理</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308192745862.png" alt="image-20250308192745862"></p><h4 id="题型1：讨论函数的连续性及间断点的类型"><a href="#题型1：讨论函数的连续性及间断点的类型" class="headerlink" title="题型1：讨论函数的连续性及间断点的类型"></a>题型1：讨论函数的连续性及间断点的类型</h4><p><img src="/%E9%AB%98%E6%95%B0/image-20250306210321992.png" alt="image-20250306210321992"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306210506711.png" alt="image-20250306210506711"></p><p><strong>求点  画函数图</strong><img src="/%E9%AB%98%E6%95%B0/image-20250306211043247.png" alt="image-20250306211043247"></p><p><img src="/%E9%AB%98%E6%95%B0/image-20250306211734506.png" alt="image-20250306211734506"></p><p>画出函数图，判断奇偶。点的连续性（左连续等于右连续，函数值等于极限值）</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308194009206.png" alt="image-20250308194009206"></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308193958893.png" alt="image-20250308193958893"></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308194527117.png" alt="image-20250308194527117"></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308195443204.png" alt="image-20250308195443204"></p><p>观察式子，分子分母变形约分</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308202241611.png" alt="image-20250308202241611"></p><p>求极限找出f（x）的表达式</p><p><strong>先分析x的2n次方</strong></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308182722429.png" alt="image-20250308182722429"></p><p>先找间断点，无定义的点    x&#x3D;1，x&#x3D;0</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308184014435.png" alt="image-20250308184014435"></p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308184051073.png" alt="image-20250308184051073"></p><p>先找间断点 x&#x3D; 0   -1   1   2</p><p>再求极限，极限不存在的是第二类间断点</p><h4 id="题型2：有关闭区间上连续函数性质的证明题"><a href="#题型2：有关闭区间上连续函数性质的证明题" class="headerlink" title="题型2：有关闭区间上连续函数性质的证明题"></a>题型2：有关闭区间上连续函数性质的证明题</h4><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308204537365.png" alt="image-20250308204537365"></p><p>最值定理和介值定理（在M与m之间的C  能找到一个 西格玛使得成立）</p><p>总结：</p><p><img src="D:\乐云云盘\hexo-blogcd\source_posts\高数\image-20250308211357591.png" alt="image-20250308211357591"></p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学、高等数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学竞赛</title>
    <link href="/2024/10/10/%E6%95%B0%E5%AD%A6%E7%AB%9E%E8%B5%9B/"/>
    <url>/2024/10/10/%E6%95%B0%E5%AD%A6%E7%AB%9E%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>11月9日数学竞赛</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学竞赛、高等数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言</title>
    <link href="/2024/10/10/C%E8%AF%AD%E8%A8%80/"/>
    <url>/2024/10/10/C%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1-scanf的读取标准输入"><a href="#1-scanf的读取标准输入" class="headerlink" title="1.scanf的读取标准输入"></a>1.scanf的读取标准输入</h2><h3 id="1-1scanf不能连续使用（char）"><a href="#1-1scanf不能连续使用（char）" class="headerlink" title="1.1scanf不能连续使用（char）"></a>1.1scanf不能连续使用（char）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,i);<br>    <span class="hljs-built_in">fflush</span>(stdin);<span class="hljs-comment">//清空缓冲区</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：scanf是以换行结束执，行下一条语句。不加换换行，直接回车会将换行当做输入。但是scanf、函数在读取整形数、浮点数、字符串会自动忽略空格换行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d &quot;</span>,&amp;a);<span class="hljs-comment">//在后面加空格也可以</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d&quot;</span>,a);<br>   <span class="hljs-comment">// fflush(stdin);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c=%c&quot;</span>,c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,i);<br>    <span class="hljs-built_in">fflush</span>(stdin);<span class="hljs-comment">//清空缓冲区</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,c);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<span class="hljs-comment">//a为整数自动忽略</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2scanf连续输入"><a href="#1-2scanf连续输入" class="headerlink" title="1.2scanf连续输入"></a>1.2scanf连续输入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-type">float</span> a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %c%f&quot;</span>,&amp;i,&amp;c,&amp;a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d c=%c a=%f&quot;</span>,i,c,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>%c之前必须有空格，否则会报错读取不到数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d &quot;</span>,&amp;a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d&quot;</span>,a);<br>    c=<span class="hljs-built_in">char</span>(a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>%d后有空格：如果输入 97 后直接按回车键，程序不会结束，而是会等待输入一个空格。只有再输入一个空格后，程序才会继续执行。</p><h2 id="2-算术运算符与关系运算符"><a href="#2-算术运算符与关系运算符" class="headerlink" title="2.算术运算符与关系运算符"></a>2.算术运算符与关系运算符</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">7</span> &lt; a &lt; <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;success&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;eror&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>无论输入什么，结果都是真值。</p><p>7 &lt; a &lt; 10，当输入-2<strong>时</strong>，7 &lt; a 是0,0&lt;10。</p><p>应该修改成：7 &lt; a &amp;&amp; a &lt; 10</p><p>关系表达式和逻辑表达式的值只有1或0</p><p><strong>单目运算符</strong>：<code>!</code>（逻辑非）、<code>~</code>（按位取反）、<code>++</code>（自增）、<code>--</code>（自减）、<code>-</code>（负号）、<code>(类型)</code>（强制类型转换）、<code>*</code>（指针解引用）、<code>&amp;</code>（取地址）、<code>sizeof</code>（长度运算符）**&gt;算数运算符&gt;关系运算符&gt;逻辑运算符**(逻辑与&amp;&amp; 和 逻辑或||)</p><p>双目运算符是需要两个运算数</p><p><strong>短路运算是一种逻辑运算的优化机制</strong>，在逻辑与（<code>&amp;&amp;</code>）和逻辑或（<code>||</code>）运算中，当根据前面的操作数就能确定整个表达式的结果时，就不会再对后面的操作数进行计算。</p><p>1.运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span> j;<br>    <span class="hljs-type">float</span> k;<br>    <span class="hljs-comment">// 修正 scanf 的格式控制，将 %0.2f 改为 %f</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %c %f&quot;</span>, &amp;i, &amp;j, &amp;k);<br>    <span class="hljs-comment">// 修正 printf 的格式控制，将 %d 改为 %f</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum=%.2f\n&quot;</span>, (<span class="hljs-type">float</span>)i + j + k);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>%1.2f:1是宽度修饰符，2是小数点后面有几位小数</p><p>在C语言中字符型会先转换成整型，进一步转换成浮点型</p><p>2.判断是否是闰年</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a)) &#123;<br>        <span class="hljs-keyword">if</span> (a%<span class="hljs-number">400</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> a%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>|| a%<span class="hljs-number">4</span>==<span class="hljs-number">0</span> ) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;success&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;eror&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-特殊语句"><a href="#3-特殊语句" class="headerlink" title="3.特殊语句"></a>3.特殊语句</h2><p>1.if-else</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250227204754961.png" alt="image-20250227204754961"></p><p>2.while</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">100</span>)<br>    &#123;<br>        sum=sum+i;<br>        i++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum=%d&quot;</span>,sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.for</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++)<br>   &#123;<br>       sum=sum+i;<br>   &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum=%d&quot;</span>,sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.break</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++)<br>   &#123;<br>       sum=sum+i;<br>       <span class="hljs-keyword">if</span> (sum&gt;=<span class="hljs-number">2000</span>)<br>           <span class="hljs-keyword">break</span>;<br>   &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum=%d\n&quot;</span>,sum);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d&quot;</span>,i);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.循环嵌套（两层for循环）</p><p>每执行一次外循环都会循环一次内循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i, j;<br>    <span class="hljs-comment">// 外层循环控制行数，从 1 到 9</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>        <span class="hljs-comment">// 内层循环控制每行的列数，从 1 到当前行数</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d*%d=%d &quot;</span>, j, i, i * j);<br>        &#125;<br>        <span class="hljs-comment">// 每行结束后换行</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.判断是否是对称数（一个一个的剥离可以使用%)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">12321</span>;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">12321</span>;<br>    <span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i)&#123;<br>        <span class="hljs-comment">// printf(&quot;%d\n&quot;,i%10);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">4</span>;k&gt;=<span class="hljs-number">0</span>;k--) &#123;<br>            b = b + (i % <span class="hljs-number">10</span>) * (<span class="hljs-type">int</span>) <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, k);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, b);<br>            i = i / <span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(b==a)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">12321</span>;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">12321</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (i) &#123;<br>        <span class="hljs-comment">// 取 i 的个位数字</span><br>        <span class="hljs-type">int</span> digit = i % <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// 将个位数字累加到 b 中</span><br>        b = b * <span class="hljs-number">10</span> + digit;<br>        <span class="hljs-comment">// 去掉 i 的个位数字</span><br>        i = i / <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (b == a) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>7.用while循环或者for计算n的阶乘</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> n,j=<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">while</span>(j&lt;=n)&#123;<br>        sum=sum*j;<br>        j++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>8.100元兑换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-type">int</span> a,b,c,d;<br>   <span class="hljs-type">int</span> G=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span>(G&lt;=<span class="hljs-number">100</span>)&#123;<br>       <span class="hljs-keyword">for</span>(a=<span class="hljs-number">0</span>;a&lt;=<span class="hljs-number">10</span>;a++)&#123;<br>           <span class="hljs-keyword">for</span>(b=<span class="hljs-number">0</span>;b&lt;=<span class="hljs-number">20</span>;b++)&#123;<br>               <span class="hljs-keyword">for</span>(c=<span class="hljs-number">0</span>;c&lt;=<span class="hljs-number">50</span>;c++)&#123;<br>                   <span class="hljs-keyword">for</span>(d=<span class="hljs-number">0</span>;d&lt;=<span class="hljs-number">100</span>;d++) &#123;<br>                       G = <span class="hljs-number">10</span> * a + <span class="hljs-number">5</span> * b + <span class="hljs-number">2</span> * c + d;<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (G==<span class="hljs-number">100</span>)&#123;<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>,a,b,c,d);<br><br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>       &#125;<br>   &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br></code></pre></td></tr></table></figure><p>逻辑问题可能引发的潜在错误，虽然代码本身没有直接的语法错误，但逻辑上存在严重问题，这可能会让代码陷入无限循环，或者输出结果不符合预期。</p><ul><li><p><strong><code>while</code> 循环逻辑有误</strong>：<code>while(G &lt;= 100)</code> 这个循环条件，由于在嵌套的 <code>for</code> 循环里不断更新 <code>G</code> 。但是G并不是递增的的。实际上，我们仅通过多层 <code>for</code> 循环嵌套就可以完成所有可能组合的遍历，<code>while</code> 循环在这里是多余的。</p></li><li><p><strong><code>if</code> 语句位置不当</strong>：<code>if</code> 语句放在多层 <code>for</code> 循环之后，此时 <code>a</code>、<code>b</code>、<code>c</code>、<code>d</code> 的值已经是它们在循环结束后的最终值，并非满足 <code>G == 100</code> 时的值，所以输出结果必然是错误的。<code>if</code> 语句应该放在最内层循环内部，这样才能在每次计算出 <code>G</code> 的值后及时进行判断。</p><p>改正后</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c, d;<br><br>    <span class="hljs-comment">// 遍历所有可能的 a、b、c、d 的组合</span><br>    <span class="hljs-keyword">for</span> (a = <span class="hljs-number">0</span>; a &lt;= <span class="hljs-number">10</span>; a++) &#123;<br>        <span class="hljs-keyword">for</span> (b = <span class="hljs-number">0</span>; b &lt;= <span class="hljs-number">20</span>; b++) &#123;<br>            <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>; c &lt;= <span class="hljs-number">50</span>; c++) &#123;<br>                <span class="hljs-keyword">for</span> (d = <span class="hljs-number">0</span>; d &lt;= <span class="hljs-number">100</span>; d++) &#123;<br>                    <span class="hljs-type">int</span> G = <span class="hljs-number">10</span> * a + <span class="hljs-number">5</span> * b + <span class="hljs-number">2</span> * c + d;<br>                    <span class="hljs-keyword">if</span> (G == <span class="hljs-number">100</span>) &#123;<br>                        <span class="hljs-comment">// 输出满足条件的 a、b、c、d 的值，添加分隔符提高可读性</span><br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, b = %d, c = %d, d = %d\n&quot;</span>, a, b, c, d);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-一维数组"><a href="#4-一维数组" class="headerlink" title="4.一维数组"></a>4.一维数组</h2><p>定义：数据类型符 数组名  [常量表达式]</p><p>常量表达式不可以为变量</p><p>如果初始化一部分，剩余的为0</p><p>使一个数组全部为0，则可以写成a[5]&#x3D;{0}</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,a,&amp;a[<span class="hljs-number">0</span>],&amp;a[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>a代表首地址</p><h3 id="4-1-数组的访问越界（access-out-of-bounds）"><a href="#4-1-数组的访问越界（access-out-of-bounds）" class="headerlink" title="4.1.数组的访问越界（access out of bounds）"></a>4.1.数组的访问越界（access out of bounds）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">30</span>;<br>    <span class="hljs-type">int</span> k =<span class="hljs-number">40</span>;<br>    <span class="hljs-type">int</span> G=<span class="hljs-number">50</span>;<br>    a[<span class="hljs-number">5</span>]=<span class="hljs-number">6</span>;<span class="hljs-comment">//访问越界</span><br>    a[<span class="hljs-number">6</span>]=<span class="hljs-number">7</span>;<br>    a[<span class="hljs-number">7</span>]=<span class="hljs-number">8</span>;<br>    <span class="hljs-comment">//printf(&quot;%d %d %d %d %d &quot;,i,j,a[5],a[6],a[7]); //输出结果 8 7 6 7 8</span><br>    <span class="hljs-comment">//printf(&quot;%d %d %d %d %d %d&quot;,i,j,k , a[5],a[6],a[7]); //输出结果 8 7 6  6 7 8</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d %d&quot;</span> ,i,j,k,G,a[<span class="hljs-number">5</span>],a[<span class="hljs-number">6</span>],a[<span class="hljs-number">7</span>]); <span class="hljs-comment">//输出结果 20 30 40 50  6 7 8</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>局部变量会按照定义的顺序依次存放在栈上。<code>a</code>、<code>i</code> 和 <code>j</code> 作为局部变量，在内存中是相邻存储的。当对 <code>a[5]</code>、<code>a[6]</code> 和 <code>a[7]</code> 进行越界写入时，可能会覆盖掉 <code>i</code> 和 <code>j</code> 所在的内存区域</p><ul><li>由于<code>a</code>数组后面紧接着是<code>i</code>、<code>j</code>、<code>k</code>、<code>G</code>这些变量，但是从打印结果<code>20 30 40 50 6 7 8</code>来看，<code>i</code>、<code>j</code>、<code>k</code>、<code>G</code>的值依然是最初设定的<code>20</code>、<code>30</code>、<code>40</code>、<code>50</code>，说明在当前的内存布局下，这三个越界赋值操作并没有覆盖到<code>i</code>、<code>j</code>、<code>k</code>、<code>G</code>的内存区域。</li><li>这可能是因为在你使用的编译器和运行环境中，栈上变量的内存分配存在一定的间隔或者布局特点，使得越界写入的数据没有触及到这些变量的存储位置。</li></ul><h3 id="4-2数组的传递（array-transmit）"><a href="#4-2数组的传递（array-transmit）" class="headerlink" title="4.2数组的传递（array-transmit）"></a>4.2数组的传递（array-transmit）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a[])</span><span class="hljs-comment">//数组的长度传递不过来</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">sizeof</span> (a)/<span class="hljs-built_in">sizeof</span> (<span class="hljs-number">4</span>); i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-built_in">print</span>(a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>不管怎么输出结果都是1 2 ，因为数组长度传不过去   sizeof (a)&#x2F;sizeof (4)</p><p>数组传递到子函数，子函数的形参接收到的是数组的起始地址（数组名）相当于指针，是8个字节。</p><p>修改：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> length)</span><span class="hljs-comment">//数组的长度传递不过来</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<br>    &#125;<br>    a[<span class="hljs-number">4</span>]=<span class="hljs-number">7</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> length=<span class="hljs-built_in">sizeof</span> (a)/<span class="hljs-built_in">sizeof</span> (<span class="hljs-type">int</span>);<br>    <span class="hljs-built_in">print</span>(a,length);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a[<span class="hljs-number">4</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在子函数中修改数组值，主函数中也同样被修改。</p><h3 id="4-3字符数组"><a href="#4-3字符数组" class="headerlink" title="4.3字符数组"></a>4.3字符数组</h3><p>字符数组的初始化：</p><p>char c[ ]&#x3D;”     “;   字符串有一个结束符&#x2F;0  。</p><p>char c[6]&#x3D;”hello”;</p><p>char c[5]&#x3D;{“h”,……”o”}</p><img src="C语言/image-20250303105956622.png" alt="image-20250303105956622" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">6</span>]=<span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,c);   <span class="hljs-comment">//hello</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,c[<span class="hljs-number">0</span>]);  <span class="hljs-comment">//h</span><br>    <span class="hljs-type">char</span> a[<span class="hljs-number">6</span>]=&#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span> ,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,a);<span class="hljs-comment">//hello</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,a[<span class="hljs-number">0</span>]);<span class="hljs-comment">//h</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用&amp;s (字符)结束末尾必须有\0,字符串末尾默认是\0.</p><p>char c[5]&#x3D;”hello”   :由于数组长度是5 ，字符串结尾没有\0;</p><p>输出字符串乱码时，观察字符数组中是否存储了\0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//模拟printf(&quot;%s&quot;,c)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span> <span class="hljs-params">(<span class="hljs-type">char</span> a[])</span></span>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a[i])&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,a[i]);<br>        i++;<br>    &#125;<br>    a[<span class="hljs-number">3</span>]=<span class="hljs-string">&#x27;!&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//char c[6]=&quot;hello&quot;;</span><br>    <span class="hljs-comment">///printf(&quot;%s\n&quot;,c);   //hello</span><br>   <span class="hljs-comment">// printf(&quot;%c\n&quot;,c[3]);  //l</span><br>    <span class="hljs-type">char</span> a[<span class="hljs-number">6</span>]=&#123;<span class="hljs-string">&quot;how1&quot;</span>&#125;;<br>    <span class="hljs-built_in">print</span> (a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-scanf读取字符串"><a href="#4-4-scanf读取字符串" class="headerlink" title="4.4  scanf读取字符串"></a>4.4  scanf读取字符串</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//scanf读取字符串时，会自动往字符数组里面读取\0</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,c);<span class="hljs-comment">//数字名存储了数组的起始地址不需要取地址</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>当输入字符串有空格时：</p><p><strong>当输入<code> hello world</code>（开头有空格）时，<code>scanf</code>只会读取到<code>hello</code>，因为遇到空格就停止读取了，<code>world</code>不会被读入到<code>str</code>中</strong>。</p><p>scanf读不到world</p><p><img src="/C%E8%AF%AD%E8%A8%80/image-20250303113741995.png" alt="image-20250303113741995"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//scanf读取字符串时，会自动往字符数组里面读取\0</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">char</span> d[<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,c,d);<span class="hljs-comment">//数字名存储了数组的起始地址不需要取地址，而且忽略了空格</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%s\n&quot;</span>,c,d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-gets-与puts讲解"><a href="#5-gets-与puts讲解" class="headerlink" title="5.gets 与puts讲解"></a>5.gets 与puts讲解</h2><p>gets函数：一次读一行字符串</p><p>puts(c)：等价于printf（“%s\n”,c）puts内放的参数是字符数组名</p><p>gets函数的格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">gets</span>(c);<br>    <span class="hljs-built_in">puts</span>(c);等价于printf（“%s\n”,c）puts内放的参数是字符数组名<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>scanf遇到空格就不读了</p><p><strong>gets遇到换行才结束</strong></p><h2 id="6-str系列字符串操作函数"><a href="#6-str系列字符串操作函数" class="headerlink" title="6.str系列字符串操作函数"></a>6.str系列字符串操作函数</h2>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux</title>
    <link href="/2024/10/10/Linux/"/>
    <url>/2024/10/10/Linux/</url>
    
    <content type="html"><![CDATA[<p>Q键可以退出</p><p>1.echo </p><p>echo [字符串]或者echo [$变量]</p><p>2.date：可以输出现在的时间</p><p>date[+指定的格式]：可以按照规定格式输出系统的时间和日期</p><p>参数：%S：秒 %M：分钟 %H：小时 %m：月份 %y:年    %A：工作日</p><p>%y %m  %d  %A %H %M %S</p><p>3.ls：列出目录的内容</p><p>   ls-l：文件和目录的详细信息</p><p>   cd：切换目录</p><p>  cp  file1  file2：复制文件和目录</p><p>  cp文件名 目标路径(&#x2F;  &#x2F;):将文件复制到目标路径下</p><p>  cp -r  原目录 目标路径：将原目录及其内容复制到目标路径</p><p>   pwd：获取当前所在的目录位置</p><p>   <strong>cat  文件名字：查看文件内容</strong></p><p>   <strong>cat 文件1 文件2：内容一块输出</strong></p><p>4.grep 字符  文件名 ：查找指定字符</p><p>5.sed：文本替换 </p><p>​              sed ‘s&#x2F;old&#x2F;new&#x2F;g’ 文件名</p><p>6.ps：可以查看当前系统的进程</p><p>7.uname -a：获取系统的基本信息</p><p>​    top：动态显示系统的资源情况</p><p>8.timedatectl [参数]:用于设置系统时间</p><p>   参数：status：显示状态信息</p><p>​               set-time：设置系统时间</p><p>9.reboot命令：重启系统</p><p>poweroff：关闭系统</p><p>10.wget：下载网络文件（全称web get）wget [参数]网络地址</p><p> 参数：-b：后台下载模式</p><p>​            -p:下载指定目录&#x2F;下载页面所有的资源</p><p>​             -r:递归下载</p><p>wget -r -p <a href="https://www.linuxprobe.com/">https://www.linuxprobe.com</a></p><p>11.ps[参数]：查看系统的进程状态</p><p>-a：显示所有进程</p><p>-u：用户及其他详细信息</p><p>11.mkdir 目录名:创建单个目录在当前目录下</p><p>​     mkdir -p &#x2F;父目录&#x2F;子目录</p><p>​     rmdir 目录名:删除空目录</p><p>​     touch 文件名：创建空文件（对已有文件执行它会更新该文件的访问和修改时间）</p><p>12.mv  源文件  &#x2F;目录  目标路径：移动文件</p><p>​     mv   名称1   名称2：重命名</p><p>​     mv &#x2F;path &#x2F;to&#x2F;A&#x2F;example.txt  &#x2F;path&#x2F;to&#x2F;B</p><p>13.rm  文件名:删除文件</p><p>​      rm -rf  目录名：删除文件</p><p>14.more&#x2F;less  文件名：分页显示 </p><p>15.free：显示内存使用情况</p><p>​      </p><ol start="18"><li></li></ol><p>systemctl start   apache2 :开启</p><p>systemctl status apache2 ：查看状态</p><p>systemctl  stop   apache2 :关闭</p><p>ifconfig：查看ip</p><p>firefox：浏览器</p>]]></content>
    
    
    <categories>
      
      <category>Linux语句命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>英语六级</title>
    <link href="/2024/10/10/%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7/"/>
    <url>/2024/10/10/%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<p><strong>一、听力部分</strong></p><ol><li>坚持泛听<ul><li>利用碎片时间，如在上下学路上、做家务时等，听英语广播（如 BBC、CNN 等）、英文电影原声、TED 演讲等，让自己沉浸在英语环境中，培养语感。</li><li>不必完全听懂每一个单词，主要是熟悉英语的语音、语调、语速和节奏。</li></ul></li><li>精听真题<ul><li>选择近几年的英语六级真题听力材料，反复听。</li><li>第一遍先整体了解内容，第二遍开始逐句听，听清楚每个单词和句子结构，听不懂的地方暂停回放，直到听懂为止。</li><li>听完后对照听力原文，分析自己没听懂的原因，是单词不认识、发音不熟悉还是语法理解有误。</li></ul></li></ol><p><strong>二、阅读部分</strong></p><ol><li>增加词汇量<ul><li>六级词汇量要求较高，每天坚持背诵一定数量的单词，可以使用单词书、背单词 APP（如百词斩、扇贝单词等）。</li><li>学习单词时，要注意其词性、词义、用法和搭配，尤其是一些高频词汇和词组。</li><li>把单词放在具体的语境中去记忆，例如通过阅读英文文章、例句来加深理解。</li></ul></li><li>提高阅读速度<ul><li>平时阅读英文文章时，有意识地提高阅读速度，可以通过限时阅读训练来实现。</li><li>先快速浏览文章的标题、开头和结尾、段落首句等，了解文章的大致主题和结构。</li><li>然后逐段阅读，抓住关键信息，不必逐字逐句翻译。</li></ul></li><li>分析真题题型<ul><li>仔细研究英语六级阅读真题的题型，如细节题、主旨题、推理题等。</li><li>针对不同题型总结解题技巧，例如细节题要在文章中找到对应的信息点，主旨题要从文章的整体结构和主题句来判断。</li></ul></li></ol><p><strong>三、写作部分</strong></p><ol><li>积累素材<ul><li>背诵一些优秀的英语范文，学习其中的好词好句、文章结构和论证方法。</li><li>关注时事热点、社会问题等，积累相关的英语表达和观点，以便在写作中能够有话可说。</li><li>建立自己的写作素材库，如常用的开头结尾句式、过渡词、名言警句等。</li></ul></li><li>多写多练<ul><li>按照英语六级写作的要求，定期进行写作练习。</li><li>练习时注意时间控制，尽量在规定时间内完成作文。</li><li>写完后对照范文进行修改，分析自己的不足之处，如语法错误、词汇使用不当、逻辑不清晰等。</li></ul></li></ol><p><strong>四、翻译部分</strong></p><ol><li>巩固语法知识<ul><li>翻译对语法要求较高，要系统地复习英语语法，特别是一些复杂的句式结构，如定语从句、状语从句、被动语态等。</li><li>可以通过做语法练习题来加深对语法知识的理解和掌握。</li></ul></li><li>练习真题<ul><li>以英语六级翻译真题为主要练习材料，先自己翻译，然后对照参考答案，分析自己的翻译与参考答案的差异。</li><li>学习参考答案中的翻译技巧和表达方式，如词汇的选择、句式的转换等。</li></ul></li><li>扩大知识面<ul><li>英语六级翻译涉及的内容广泛，包括中国文化、历史、经济、科技等方面。</li><li>平时多阅读一些相关的英文文章和书籍，了解不同领域的知识，增加自己的知识储备。</li></ul></li></ol><p><strong>五、综合学习</strong></p><ol><li>制定学习计划<ul><li>根据自己的实际情况，制定合理的英语六级学习计划。</li><li>明确每天的学习任务和时间安排，确保有足够的时间进行各个部分的学习和练习。</li></ul></li><li>模拟考试<ul><li>定期进行英语六级模拟考试，按照考试时间和要求进行答题。</li><li>模拟考试可以帮助你熟悉考试流程和题型，提高答题速度和准确率，同时也能检测自己的学习效果。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英语六级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用</title>
    <link href="/2024/10/10/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/10/10/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h5 id="1-文章"><a href="#1-文章" class="headerlink" title="1.文章"></a>1.文章</h5><p>新建文章：</p><p>hexo new 文章文件名</p><p>发布文章：</p><p>git add “D:\hexo-blogcd\source_posts\name.md”</p><p> git commit -m “name.md 文件”</p><p>新建草稿发布草稿文章：</p><p>hexo new draft 草稿文件名（也可以手动将_drafts目录下的草稿移动到_posts目录下）</p><p>hexo publish 文章文件名</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20241030212816256.png" alt="image-20241030212816256" style="zoom:67%;" /><h5 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2.基本操作"></a>2.基本操作</h5><p> hexo s：浏览localhost4000</p><p> hexo g   hexo d：部署上传</p><h5 id="3-hexo更换主题后，部署在Github-Page无CSS样式"><a href="#3-hexo更换主题后，部署在Github-Page无CSS样式" class="headerlink" title="3.hexo更换主题后，部署在Github Page无CSS样式"></a>3.hexo更换主题后，部署在Github Page无CSS样式</h5><p>在hexo的根目录下_config.yml配置文件中，找到URL部分的配置，修改url选项</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20241030212132689.png" alt="image-20241030212132689"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20241030212234461.png" alt="image-20241030212234461"></p><p>hexo clean<br>hexo g<br>hexo d # 部署至上线，如 Github Page</p><h5 id="4-显示用户头像"><a href="#4-显示用户头像" class="headerlink" title="4.显示用户头像"></a>4.显示用户头像</h5><p>将图片保存在source下的images文件夹中，修改主题配置文件_config.yml中avatar的url。</p><p>rounded：true（则图片以圆形显示，false以方形显示）</p><p>rotated：true（鼠标放上去，图片会旋转）</p><h5 id="5-为博客插入音乐"><a href="#5-为博客插入音乐" class="headerlink" title="5.为博客插入音乐"></a>5.为博客插入音乐</h5><p>1）</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&amp;id=29004400&amp;auto=1&amp;height=66"></iframe><p>6.hexo的总访问量不显示</p><p>可能是因为用的LeanCloud（中文版）没有写uri；</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日常记录</title>
    <link href="/2024/09/28/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/09/28/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>便签</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文章链接</title>
    <link href="/2024/09/27/%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/"/>
    <url>/2024/09/27/%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
